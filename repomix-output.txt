This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-28T16:14:05.181Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
api/
  src/
    interfaces/
      __init__.py
      db.py
      llm.py
      supabase.py
    lib/
      git_diff_processor.py
    prompts/
      git_diff_processor.md
    utils/
      error_handler.py
      keys.py
      logging.py
  .flake8
  .gitignore
  logging.yaml
  mypy.ini
  nixpacks.toml
  pyproject.toml
  railway.json
LICENSE
README.md

================================================================
Repository Files
================================================================

================
File: api/src/interfaces/__init__.py
================
from . import db
from . import llm

__all__ = ["db", "llm"]

================
File: api/src/interfaces/db.py
================
import logging
import os
from dotenv import load_dotenv
from supabase import create_client, Client


def client() -> Client:
    logging.debug("Creating Supabase client")
    load_dotenv()
    url: str | None = os.environ.get("PUBLIC_SUPABASE_URL")
    key: str | None = os.environ.get("PUBLIC_SUPABASE_ANON_KEY")

    if url is None or key is None:
        logging.error("PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY must be set")
        raise ValueError("PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY must be set")

    return create_client(url, key)

================
File: api/src/interfaces/llm.py
================
import os

from langchain_openai import AzureChatOpenAI, ChatOpenAI
from pydantic import SecretStr
from langchain_community.chat_models import ChatPerplexity


def gpt_4o_mini(temperature: float = 0.5) -> AzureChatOpenAI:
    AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
    assert (
        AZURE_OPENAI_API_KEY is not None
    ), "Environment variable 'AZURE_OPENAI_API_KEY' is not set"

    AZURE_OPENAI_API_ENDPOINT = os.getenv("AZURE_OPENAI_API_ENDPOINT")
    assert (
        AZURE_OPENAI_API_ENDPOINT is not None
    ), "Environment variable 'AZURE_OPENAI_API_ENDPOINT' is not set"

    return AzureChatOpenAI(
        streaming=True,
        azure_deployment="gpt-4o-mini",
        temperature=temperature,
        api_key=SecretStr(AZURE_OPENAI_API_KEY),
        azure_endpoint=AZURE_OPENAI_API_ENDPOINT,
        model="gpt-4o-mini",
        api_version="2024-06-01",
        max_retries=20,
    )


def gpt_4o(temperature: float = 0.5) -> AzureChatOpenAI:
    AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
    assert (
        AZURE_OPENAI_API_KEY is not None
    ), "Environment variable 'AZURE_OPENAI_API_KEY' is not set"

    AZURE_OPENAI_API_ENDPOINT = os.getenv("AZURE_OPENAI_API_ENDPOINT")
    assert (
        AZURE_OPENAI_API_ENDPOINT is not None
    ), "Environment variable 'AZURE_OPENAI_API_ENDPOINT' is not set"

    return AzureChatOpenAI(
        streaming=True,
        azure_deployment="gpt-4o",
        temperature=temperature,
        api_key=SecretStr(AZURE_OPENAI_API_KEY),
        azure_endpoint=AZURE_OPENAI_API_ENDPOINT,
        model="gpt-4o",
        api_version="2024-06-01",
        max_retries=20,
    )

================
File: api/src/interfaces/supabase.py
================
import os, logging
from sqlmodel import SQLModel, create_engine, Session
from dotenv import load_dotenv, find_dotenv
from src.utils.error_handler import handle_error
from src.models.db import (
    Agent,
    Agent_Threads,
    Document,
    Eca,
    Event,
    Observation,
    Profiles,
    Prompt,
    PromptCollection,
    Scenerio,
    Thread,
)


_: bool = load_dotenv(find_dotenv())

engine = create_engine(url=str(os.getenv("PG_DB_URL")), echo=True)


@handle_error
def create_tables():
    logging.info(f"Creating tables with connection: {os.getenv('PG_DB_URL')}")

    tables = SQLModel.metadata.tables
    print(f"Tables to be created: {', '.join(tables.keys())}")

    SQLModel.metadata.create_all(engine)
    logging.info("Tables created successfully")


def get_session():
    with Session(engine) as session:
        yield session

================
File: api/src/lib/git_diff_processor.py
================
from git import Actor, Repo
from langchain_core.prompts import ChatPromptTemplate
import os
from typing import Optional
from dotenv import load_dotenv
from src.interfaces import llm
from langchain_core.messages import SystemMessage
from pydantic import BaseModel, Field
from pathlib import Path

class CommitMessage(BaseModel):
    """Format for generating Git commit messages."""
    chain_of_thought: str = Field(description="""
This is your chain of thought, your reasoning, to craft the final response.

Here are a few things to keep in mind:
1. Define a clear strategy to approach the Human Expert's needs.
2. Think step by step about how to solve the problem.
3. Get a clear understanding of how you can approach it.
4. Take into account the output of the previous tool calls and model calls to check whats already been done and what should be the next step.
5. Your tool output has already reached user, so you don't need to repeat that in your response, only use it to guide your response and get insights and intuitions.

Take your time to think and reason.
Always start with `Let's think step by step.`
""")
    headline: str = Field(description="Conventional Commits headline; a one line summary of the changes")
    what_this_means_for_non_technical_people: str = Field(description="""
What this means for non-technical people, in a way that is easy to understand.
""")
    what_this_means_for_technical_people: str = Field(description="""
What this means for technical people, in a way that is easy to understand.
""")
    details: list[str] = Field(description="List of specific changes made")

class GitDiffProcessor:
    def __init__(self, repo_path: Optional[str] = None, personal_prompt: str = ""):
        """Initialize the GitDiffProcessor with a repo path and LangChain components."""
        load_dotenv()
        self.repo = Repo(repo_path or os.getcwd())
        
        # Initialize the LLM with structured output
        self.llm = llm.gpt_4o().with_structured_output(CommitMessage)

        # Read prompt template from markdown file
        prompt_path = Path(__file__).parent.parent / "prompts" / "git_diff_processor.md"
        with open(prompt_path, "r") as f:
            prompt_template = f.read()

        # Create prompt template using ChatPromptTemplate
        self.prompt = ChatPromptTemplate.from_messages([
            SystemMessage(
                content=f"""
{personal_prompt}

{prompt_template}

### PREVIOUS COMMITS ###
```
{self.get_previous_commits()}
```

### CURRENT DIFF ###
{self.get_uncommitted_changes()}
                """
            ),
        ])
        
        self.chain = self.prompt | self.llm

    def get_uncommitted_changes(self) -> str:
        """Get diff between working directory and HEAD."""
        try:
            return self.repo.git.diff('HEAD')
        except Exception as e:
            raise Exception(f"Error getting git diff: {str(e)}")

    def generate_commit_message(self, diff_text: str) -> CommitMessage | None:
        """Generate a summary of the provided diff text using the LLM chain."""
        if not diff_text:
            return None
        
        try:
            result = self.chain.invoke({})

            if isinstance(result, CommitMessage):
                return result
            else:
                raise Exception(f"LLM returned invalid response: {result}")
        except Exception as e:
            raise Exception(f"Error generating commit message: {str(e)}")

    def create_commit_with_summary(self, commit_msg: CommitMessage) -> None:
        """Create a git commit with the provided structured summary."""
        try:
            # Stage all changes
            self.repo.git.add('.')
            
            # Format the commit message (fixed string concatenation)
            message = (
                f"{commit_msg.headline}\n\n"
                f"Code Changes:\n{'\n'.join(f'- {detail}' for detail in commit_msg.details)}\n\n"
                f"What this means for non-technical people:\n{commit_msg.what_this_means_for_non_technical_people}\n\n"
                f"What this means for technical people:\n{commit_msg.what_this_means_for_technical_people}\n\n"
            )
            # Create commit
            self.repo.index.commit(
                author=Actor(name="antopiahk", email="antopiahk@gmail.com"),
                message=message
            )
        except Exception as e:
            raise Exception(f"Error creating commit: {str(e)}")

    def get_previous_commits(self, num_commits: int = 15) -> str:
        """Get the last n commit messages from the repository."""
        try:
            commits = list(self.repo.iter_commits('HEAD', max_count=num_commits))
            commit_messages = []
            for commit in commits:
                commit_messages.append(f"commit {commit.hexsha[:8]}\n{commit.message}")
            return "\n\n".join(commit_messages)
        except Exception as e:
            raise Exception(f"Error getting previous commits: {str(e)}")

if __name__ == "__main__":

    personal_prompt = """
I only really use these commit types: feat, fix, refactor, chore, style.
"""
    repo_path = "/home/jorge/futino/ai-git-tool"
    processor = GitDiffProcessor(repo_path, personal_prompt)
    diff_text = processor.get_uncommitted_changes()
    commit_message = processor.generate_commit_message(diff_text)
    if commit_message:
        processor.create_commit_with_summary(commit_message)

================
File: api/src/prompts/git_diff_processor.md
================
# Git Diff Processor Role and Guidelines

## Role
You are a helpful Project Manager that summarizes git diffs concisely 
for software engineers to be seen by the entire team.

## Analyzing Git Diffs
Follow these specific steps when analyzing diffs:
1. Identify the files being modified
2. Categorize the type of change (feature, bug fix, refactor, etc.)
3. Look for patterns in the changes (e.g., similar modifications across files)
4. Analyze the impact on the codebase
5. Consider dependencies or related components affected
6. Determine if there are any breaking changes
{prompt_template}

## Previous Commits
Use these previous commits as a guide for maintaining consistency in commit messages:
```
{self.get_previous_commits()}
```

## Git Diff Interpretation
The diff format shows changes between files with:
- Lines starting with '---' and '+++' show the old and new versions of files
- @@ markers indicate the location of changes in the file
- Lines starting with '-' (in red) indicate removed code
- Lines starting with '+' (in green) indicate added code
- Lines without +/- are unchanged, shown for context

## Commit Message Format

For details, make sure to always relate each detail to either a file, feature, story or task.
Make sure to not repeat the same changes in different details, instead focus on the semantic meaning of the changes.
A detail might be:
- A new package being added
- A file being added, and what new purpose it serves
- A file being removed, and what purpose it served
- A function being added, and what it does
- A function being removed, and what it did
- Code being refactored, and what it was for
This is a good example:
- Updated the GitDiffProcessor constructor to read the prompt template from a markdown file.
- Improved error handling in the generate_commit_message method.

The headline MUST follow the Conventional Commits format:  
`<type>[optional scope]: <description>`

### Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that don't affect the meaning of the code
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools

### Example Headlines
- `feat(auth): add OAuth2 authentication flow`
- `fix(api): handle null response from external service`
- `refactor(database): optimize query performance`
- `docs(readme): update installation instructions`

### Scope Guidelines
- Use lowercase, hyphen-separated words
- Keep it brief (1-2 words maximum)
- Use common team terminology
- Examples: api, auth, ui, core, utils

### Breaking Changes
- Add ! after the type/scope to indicate breaking changes
- Example: `feat(api)!: change authentication endpoint response format`

### Dependency Updates
- Use `chore(deps)` for routine updates
- Use `fix(deps)` for security updates
- Include the nature of the update in the description
- Example: `chore(deps): update lodash to v4.17.21`

## Non-Technical Explanations
When explaining changes for non-technical people:
- Use analogies to everyday objects or situations
- Avoid technical jargon completely
- Focus on business value and user impact
- Use simple cause-and-effect relationships

### Examples
| Technical | Non-Technical |
|-----------|---------------|
| "Implemented JWT authentication" | "Added a secure digital ID card system that helps users stay logged in safely" |
| "Optimized database queries" | "Made the application faster when searching for information" |
| "Refactored user validation" | "Improved how we check if users are who they say they are" |

## Response Format
Focus on:
- Keeping your chain of thought logical and coherent
- The actual code changes, not the metadata (like file paths and chunk headers)
- Semantic meaning of the changes rather than line-by-line descriptions
- Group related changes together in the details
- Use technical terms appropriate for the programming language

================
File: api/src/utils/error_handler.py
================
from functools import wraps
import logging
import traceback

from fastapi import HTTPException


def ahandle_error(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            response = await func(*args, **kwargs)
            return response
        except HTTPException as e:
            raise e
        except Exception as e:
            tb_str = "".join(traceback.format_exception(e))
            logging.error(f"Error in {func.__name__}: {e}\n{tb_str}")
            raise HTTPException(
                status_code=500, detail={"message": str(e), "traceback": tb_str}
            )

    return wrapper


def handle_error(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            response = func(*args, **kwargs)
            return response
        except HTTPException as e:
            raise e
        except Exception as e:
            tb_str = "".join(traceback.format_exception(e))
            logging.error(f"Error in {func.__name__}: {e}\n{tb_str}")
            raise HTTPException(
                status_code=500, detail={"message": str(e), "traceback": tb_str}
            )

    return wrapper

================
File: api/src/utils/keys.py
================
import os

# Access environment variables
AZURE_OPENAI_API_DEPLOYMENT_NAME = os.getenv("AZURE_OPENAI_API_DEPLOYMENT_NAME")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_API_INSTANCE_NAME = os.getenv("AZURE_OPENAI_API_INSTANCE_NAME")
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION")
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")

PUBLIC_SUPABASE_ANON_KEY = os.getenv("PUBLIC_SUPABASE_ANON_KEY")
PUBLIC_SUPABASE_URL = os.getenv("PUBLIC_SUPABASE_URL")
PUBLIC_CRITINO_API_URL = os.getenv("PUBLIC_CRITINO_API_URL")

================
File: api/src/utils/logging.py
================
import logging
import logging.config
import yaml
import os
from pathlib import Path


def setup_logging():
    try:
        config_path = Path(__file__).parent.parent.parent / "logging.yaml"

        if os.path.exists(config_path):
            with open(config_path, "rt") as f:
                config = yaml.safe_load(f)
                logging.config.dictConfig(config)
        else:
            logging.basicConfig(
                level=logging.INFO,
                format="%(asctime)s - %(levelname)s - %(message)s",
                datefmt="%Y-%m-%d %H:%M:%S",
                handlers=[logging.StreamHandler()],
            )
            logging.warning(
                f"Logging config file not found at {config_path}, using basic configuration"
            )
    except Exception as e:
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s",
            handlers=[logging.StreamHandler()],
        )
        logging.error(f"Error setting up logging configuration: {str(e)}")

================
File: api/.flake8
================
[flake8]
max-line-length = 80
exclude = .git,__pycache__,__init__.py,.mypy_cache,.pytest_cache

================
File: api/.gitignore
================
# Custom
OAI_CONFIG_LIST
tasks
chromadb/
tmp/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Pycharm
.idea/

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# This is extracted from the web .gitignore and pasted here
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

# Security key
*.asc

================
File: api/logging.yaml
================
version: 1
disable_existing_loggers: false

formatters:
  standard:
    format: "%(asctime)s - %(levelname)s - %(message)s"

handlers:
  console:
    class: logging.StreamHandler
    formatter: standard
    stream: ext://sys.stdout

loggers:
  uvicorn:
    error:
      propagate: true

root:
  level: INFO
  handlers: [console]
  propagate: no

================
File: api/mypy.ini
================
[mypy]
plugins = pydantic.mypy
disallow_untyped_defs = True
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

================
File: api/nixpacks.toml
================
[phases.setup]
nixPkgs = ['...', 'poetry']

[start]
cmd = 'fastapi run src'

================
File: api/pyproject.toml
================
[tool.poetry]
name = "src"
version = "0.0.1"
description = "A tool to process git diffs using AI Agents"
authors = [
    "Jorge Lewis <jorge.lewis@futi.no>",
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
fastapi = { extras = ["standard"], version = "*" }
tenacity = "*"
supabase = "*"
langchain = "*"
langchain-community = "*"
langchain-openai = "*"
praw = "*"
markdown = "*"
gptrim = "*"
selenium = "*"
python-dotenv = "*"
diskcache = "*"
pydantic = "*"
sse-starlette = "*"
watchfiles = "*"
ipython = "*"
langgraph = "*"
html2text = "*"
langchain-core = "*"
langchain-chroma = "*"
chromadb = "*"
pypdf = "*"
pypdf2 = "*"
langchain-experimental = "*"
google-search-results = "*"
sentence-transformers = "*"
sqlmodel = "^0.0.22"
psycopg2-binary = "^2.9.10"
gitpython = "^3.1.43"

[tool.poetry.group.dev.dependencies]
mypy = "*"
black = "*"
isort = "*"
autoflake = "*"
flake8 = "*"
pytest = "*"
pytest-cov = "*"
pyright = "*"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 80

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

================
File: api/railway.json
================
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Startino

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
# ai-git-tool
